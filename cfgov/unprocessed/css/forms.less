/* ==========================================================================
   cfgov-refresh
   forms
   ========================================================================== */

/* topdoc
    name: Custom select menus via jquery.custom-input
    family: cfgov-forms
    patterns:
    - name: Custom select menu demo with initialization markup
      markup: |
        <div class="custom-select">
            <select>
                <option value="option1">Option 1</option>
                <option value="option2">Option 2</option>
                <option value="option3">Option 3</option>
                <option value="option4">Option 4</option>
            </select>
            <span class="custom-select_icon cf-icon cf-icon-down"></span>
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .custom-select
            select
              option
            .custom-select-icon
      notes:
        - "Use the markup structure above to add .custom-select elements.
          It is meant to allow for cases where JavaScript is unavailable.
          The jQuery plugin transforms this initial HTML by adding more markup
          and classes. If JavaScript is unavailable the new elements and classes
          won't be added and won't interfere with default select behavior."
        - "JavaScript is used to add .is-hovered and .is-focused classes to
          .custom-select by detecting :hover and :focus on .custom-select."
        - "The jQuery plugin will auto intitiate all select elements that are
          wrapped in a parent with the class of custom-select."
    - name: .custom-select__month (modifier)
      markup: |
        <div class="custom-select custom-select__month">
            <select>
                <option value="">Month</option>
                <option value="01">Jan</option>
                <option value="02">Feb</option>
                <option value="03">Mar</option>
                <option value="04">Apr</option>
                <option value="05">May</option>
                <option value="06">Jun</option>
                <option value="07">Jul</option>
                <option value="08">Aug</option>
                <option value="09">Sep</option>
                <option value="10">Oct</option>
                <option value="11">Nov</option>
                <option value="12">Dec</option>
            </select>
            <span class="custom-select_icon cf-icon cf-icon-down"></span>
        </div>
      codenotes:
        - .custom-select__month
      notes:
        - "Simply sets a max-width appropriate for a month input."
    - name: .custom-select__year (modifier)
      markup: |
        <div class="custom-select custom-select__year">
            <select>
                <option value="">Year</option>
                <option value="2014">2014</option>
                <option value="2013">2013</option>
                <option value="2012">2012</option>
                <option value="2011">2011</option>
            </select>
            <span class="custom-select_icon cf-icon cf-icon-down"></span>
        </div>
      codenotes:
        - .custom-select__year
      notes:
        - "Simply sets a max-width appropriate for a year input."
    - name: JavaScript setup
      markup: |
        <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
        <script src="../../static/js/jquery.custom-select.js"></script>
      notes:
        - "The jQuery plugin will auto intitiate all select elements with the
          class of .custom-select and append the the .is-enabled class which
          activates the styling."
    tags:
    - cfgov-forms
*/

.custom-select {

    & {
        .is-enabled& {
            overflow: hidden;
            position: relative;
            min-height: unit((@base-line-height-px + (4px * 2)) / @base-font-size-px, em);
            // Since an input-group_item can overlap another we need to use z-index
            // is needed to allow the focused input to pop over unfocused inputs.
            z-index: 1;
            border: solid 1px @gray-80;
            background: @white;
        }
    }

    &.is-hovered,
    &.is-focused {
        z-index: 2;
        border-color: @pacific;
        outline: 1px solid @pacific;
    }

    &_icon {
        // This element does not get added dynamically so it should be hidden
        // until JavaScript is enabled.
        display: none;
        position: absolute;
        top: 0;
        right: 0;
        z-index: 2;
        min-width: 1em;
        padding: unit( 4px / @base-font-size-px, em )
                 unit( 6px / @base-font-size-px, em );
        // This will overlay .custom-select_text and make it appear as if any
        // long words get cut off before they touch the icon.
        border-left: 4px solid @white;
        background: @gray-10;
        color: @gray-50;
        line-height: @base-line-height;
        text-align: center;
        .is-enabled & {
            display: inline-block;
        }
    }

    &_text {
        position: absolute;
        top: 0;
        left: 0;
        padding: unit( 4px / @base-font-size-px, em )
                 unit( 10px / @base-font-size-px, em );
        z-index: 1;
        font-family: Arial, sans-serif;
        line-height: @base-line-height;
        color: @black;
    }

    &_placeholder {
        color: @gray;
    }

    &_select {
        position: relative;
        // Push the native select arrow out of view
        width: 100%;
        max-height: unit((@base-line-height-px + (4px * 2)) / @base-font-size-px, em);
        padding: unit( 4px / @base-font-size-px, em );
        z-index: 3;
        // Customize the colors
        border: 0;
        border-radius: 0;
        background-color: transparent;
        background-image: none;
        color: @black;
        -webkit-appearance: none;
        box-shadow: none;

        .is-hovered &,
        .is-focused & {
            outline: none;
        }
    }

    &__month {
        max-width: unit(96px / @base-font-size-px, em);
    }

    &__year {
        max-width: unit(86px / @base-font-size-px, em);
    }
}


/* topdoc
  name: Grouped inputs
  family: cfgov-forms
  patterns:
    - name: Horizontal inputs
      markup: |
        <div class="input-group">
            <input class="input-group_item" type="text">
            <input class="input-group_item" type="text">
        </div>
        <br>
        <br>
        <div class="input-group">
            <select class="input-group_item">
                <option value="option1">Option 1</option>
                <option value="option2">Option 2</option>
                <option value="option3">Option 3</option>
                <option value="option4">Option 4</option>
            </select>
            <select class="input-group_item">
                <option value="option1">Option 1</option>
                <option value="option2">Option 2</option>
                <option value="option3">Option 3</option>
                <option value="option4">Option 4</option>
            </select>
        </div>
      notes:
        - "BEFORE moving to Capital Framework please review the work done in
           the Owning a Home project to make sure this pattern will be useful for
           both projects."
  tags:
    - cfgov-forms
*/

.input-group {

    &_item,
    &_item[type="text"] {
        display: inline-block;
        box-sizing: border-box;
        width: 50%;
        position: relative;
        // Since an input-group_item can overlap another we need to use z-index
        // is needed to allow the focused input to pop over unfocused inputs.
        z-index: 1;

        & + & {
            margin-left: unit(-5px / @base-font-size-px, em);
        }

        &:focus {
            z-index: 2;
        }
    }

}


/* topdoc
  name: Form actions
  family: cfgov-forms
  patterns:
    - name: Form actions
      markup: |
        <div class="form-actions">
            <input type="submit" value="Apply filters" class="btn form-actions_item">
            <a href="/blog/" class="btn btn__warning btn__link form-actions_item">Reset filters</a>
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .form-actions
            .form-actions_item
      notes:
        - ".form-actions adds a top margin to set it apart from form groups."
        - ".form-actions_item adds margins between each other."
    - name: "Form actions modifier: right align"
      markup: |
        <div class="form-actions form-actions__right">
            <a href="/blog/" class="btn btn__warning btn__link form-actions_item">Reset filters</a>
            <input type="submit" value="Apply filters" class="btn form-actions_item">
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .form-actions.form-actions__right
            .form-actions_item
      notes:
        - "Align text to the right."
    - name: "Form actions modifier: right align on medium screens or larger"
      markup: |
        <div class="form-actions form-actions__right-on-med">
            <a href="/blog/" class="btn btn__warning btn__link form-actions_item">Reset filters</a>
            <input type="submit" value="Apply filters" class="btn form-actions_item">
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .form-actions.form-actions__right-on-med
            .form-actions_item
      notes:
        - "Align text to the right at 600px or larger."
  tags:
    - cfgov-forms
*/

.form-actions {
    margin-left: unit( (@grid_gutter-width / 2) / @base-font-size-px, em);

    // Once the form layouts start using columns their margins won't collapse
    // so we'll need to update the top margin from .form-actions to avoid
    // double margins.
    .form-l + & {
        .respond-to-min(@bp-sm-min, {
            margin-top: unit((@grid_gutter-width / 2) / @base-font-size-px, em);
        });
    }
}

.form-actions__right {
    text-align: right;
}

.form-actions__right-on-med {
    .respond-to-min(@bp-sm-min, {
        text-align: right;
    });
}

.form-actions_item + .form-actions_item {
    // Eyeballed to 15px considering ~4px of space between inline-block items.
    margin-left: unit(((@grid_gutter-width / 2) - 5) / @base-font-size-px, em);
}


/* topdoc
  name: Form layouts
  family: cfgov-forms
  patterns:
    - name: Form columns
      markup: |
        <div class="form-l">
            <div class="form-l_col form-l_col-1-3">
                Form layout column 1
            </div>
            <div class="form-l_col form-l_col-1-3">
                Form layout column 2
            </div>
            <div class="form-l_col form-l_col-1-3">
                Form layout column 3
            </div>
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .form-l
            .form-l_col.form-l_col-1-3
    - name: "Form layout modifier: flush"
      markup: |
        <div class="form-l form-l__flush">
            <div class="form-l_col form-l_col-1-3">
                Form layout column 1
            </div>
            <div class="form-l_col form-l_col-1-3">
                Form layout column 2
            </div>
            <div class="form-l_col form-l_col-1-3">
                Form layout column 3
            </div>
        </div>
      codenotes:
        - .form-l.form-l__flush
      notes:
        - "Form layout columns have left and right gutters. If you want the
          first and last column in each row to sit flush left/right
          respectively then use the .form-l__flush modifier."
    - name: Form layout columns
      codenotes:
        - .form-l_col
        - .form-l_col-1-2
        - .form-l_col-1-3
        - .form-l_col-1-4
      notes:
        - ".form-l_col-1-3 elements are stacked for small screens. When the
          viewport reaches 600px they transform into columns with one half the
          width of the container. When the viewport reaches 768px their width
          updates to one third of the container."
  tags:
    - cfgov-forms
*/

.form-l {
    &__flush {
        .respond-to-min(@bp-lg-min, {
            .grid_nested-col-group();
        });
    }
    &__float {
        .respond-to-min(@bp-lg-min, {
            .u-clearfix();
            & .form-l_col {
                display: block;
                float: left;
                margin-right: 0;
            }
        });
    }
}

.form-l_col {
    // Eyeballed to 30px considering line-height.
    margin-bottom: unit(30px / @base-font-size-px, em);
}

.form-label-header + .form-l .form-label-header {
    // Override heading-5() settings.
    .webfont-regular();
    text-transform: none;
    margin-bottom: unit(10px / 14px, em);
}

.form-l {
    .respond-to-min(@bp-sm-min, {
        .grid_nested-col-group();
    });
}

.form-l_col input,
.form-l_col select {
    // TODO: Move border-box value to cf-forms.
    box-sizing: border-box;
    width: 100%;
}

.respond-to-min(@bp-sm-min, {
    .form-l_col-1-4 {
        .grid_column(3);
    }

    .form-l_col-1-2 {
        .grid_column(6);
    }

    .form-l_col-1-3 {
        .grid_column(4);
    }

    .form-l_col-2-3 {
        .grid_column(8);
    }

    .form-l_col-1 {
        .grid_column(12);
    }
});


/* topdoc
  name: Checkboxes and radio buttons
    family: cf-forms
    notes:
      - "CSS for checkboxes and radio buttons requires following a specific HTML structure for each type of input, otherwise the styles will not be properly applied."
      - "Labels should follow the input"
      - "Remember to use 'for' and 'id' attributes so that selected/checked styles function properly."
      - "Remember to use the same 'name' attribute for each set of radio buttons."
    patterns:
      - name: Checkbox
        markup: |
            <fieldset class="u-reset">
                <div class="form-l_col
                            form-l_col-1">
                    <legend class="form-label-header">
                        Pets you own
                    </legend>
                </div>
                <div class="form-l_col
                            form-l_col-1-2
                            form-l-inset">
                    <div class="form-l-inset_container">
                        <input class="cf-input"
                               type="checkbox"
                               name="form_id"
                               id="input_id_cats">
                        <label class="cf-input_label"
                               for="input_id_cats">
                            Cats
                        </label>
                    </div>
                </div>
                <div class="form-l_col
                            form-l_col-1-2
                            form-l-inset">
                    <div class="form-l-inset_container">
                        <input class="cf-input"
                               type="checkbox"
                               name="form_id"
                               id="input_id_dogs">
                        <label class="cf-input_label"
                               for="input_id_dogs">
                            Dogs
                        </label>
                    </div>
                </div>
            </fieldset>
        codenotes:
          - |
            Structural cheat sheet:
            -----------------------
            fieldset
                .form-l_col-1
                    legend
                .form-l-inset
                    .form-l-inset_container
                        input[type="checkbox"].cf-input
                        label.cf-input_label
        notes:
          - "Use the markup structure above to add checkbox .cf-input elements."
      - name: Radio buttons
        markup: |
            <fieldset class="u-reset">
                <div class="form-l_col
                            form-l_col-1">
                    <legend class="form-label-header">
                        Pick an option
                    </legend>
                </div>
                <div class="form-l_col
                            form-l_col-1-2
                            form-l-inset">
                    <div class="form-l-inset_container">
                        <input class="cf-input"
                               type="radio"
                               name="form_id"
                               id="input_id_1">
                        <label class="cf-input_label"
                               for="input_id_1">
                            Yes
                        </label>
                    </div>
                </div>
                <div class="form-l_col
                            form-l_col-1-2
                            form-l-inset">
                    <div class="form-l-inset_container">
                        <input class="cf-input"
                               type="radio"
                               name="form_id"
                               id="input_id_2">
                        <label class="cf-input_label"
                               for="input_id_2">
                            No
                        </label>
                    </div>
                </div>
            </fieldset>
        codenotes:
          - |
            Structural cheat sheet:
            -----------------------
            fieldset
                .form-l_col-1
                    legend
                .form-l-inset
                    .form-l-inset_container
                        input[type="radio"].cf-input
                        label.cf-input_label
        notes:
          - "Use the markup structure above to add radio button .cf-input elements."
    tags:
      - cf-forms
*/

@input-active:                  @pacific;

@input-bg-disabled:             @gray;
@input-border-disabled:         @gray-50;

// Insets
@input-inset-bg:                @gray-20;
@input-inset-selected:          @pacific-20;


.cf-input {

    @checkbox-width: unit( 18px / @base-font-size-px, em);
    @radio-width: unit( 17px / @base-font-size-px, em);

    &[type="checkbox"],
    &[type="radio"]{
        .u-visually-hidden();

        .lt-ie9 & {
            border: 0;
            float: left;
            margin: .4em .4em 0 0;
            position: static;
            width: auto;
        }
    }

    &[type="checkbox"] + label,
    &[type="radio"] + label {
        cursor: pointer;
        margin-bottom: 0.5em;
    }

    &[type="checkbox"] + label::before,
    &[type="radio"] + label::before {
        background: white;
        content: '\a0';
        display: inline-block;
        margin-top: unit( 2px / @base-font-size-px, em);
        margin-right: .6em;
    }

    &[type="radio"] + label::before {
        height: @radio-width;
        width: @radio-width;
        border-radius: 100%;
        box-shadow: 0 0 0 2px #fff, 0 0 0 3px @input-border;
    }

    &[type="radio"]:checked + label::before {
        background-color: @input-active;
        box-shadow: 0 0 0 2px @input-bg, 0 0 0 3px @input-active;
    }

    &[type="radio"]:hover + label::before {
        box-shadow: 0 0 0 2px @input-bg, 0 0 0 3px @input-active;
    }

    &[type="radio"]:focus + label::before {
        box-shadow: 0 0 0 1px @input-bg, 0 0 0 3px @input-active;
    }

    &[type="checkbox"] + label::before {
        height: @checkbox-width;
        width: @checkbox-width;
        box-shadow: 0 0 0 1px @input-bg, 0 0 0 2px @input-border;
    }

    &[type="checkbox"]:checked + label::before {
        content: @cf-icon-approved;
        font-family: 'CFPB Minicons';
        font-size: unit( 16px / @base-font-size-px, em);
        box-shadow: 0 0 0 1px @input-bg, 0 0 0 2px @input-active;
        text-align: center;
    }

    &[type="checkbox"]:hover + label::before {
        box-shadow: 0 0 0 1px @input-bg, 0 0 0 2px @input-active;
    }

    &[type="checkbox"]:focus + label::before {
        box-shadow: 0 0 0 2px @input-active;
    }

    &[type="checkbox"]:disabled + label {
        color: @input-border-disabled;
    }

    &[type="checkbox"]:disabled + label::before,
    &[type="radio"]:disabled + label::before {
      background: @input-bg-disabled;
      box-shadow: 0 0 0 1px @input-bg, 0 0 0 2px @input-border-disabled;
      cursor: not-allowed;
    }

}



/* topdoc
    name: Form layouts
    family: cf-forms
    patterns:
      - name: Form one-half columns
        markup: |
          <div class="form-l">
              <div class="form-l_col form-l_col-1-3">
                  Form layout column 1
              </div>
              <div class="form-l_col form-l_col-1-2">
                  Form layout column 2
              </div>
          </div>
        codenotes:
          - |
            Structural cheat sheet:
            -----------------------
            .form-l
              .form-l_col.form-l_col-1-2
      - name: Form one-third columns
        markup: |
          <div class="form-l">
              <div class="form-l_col form-l_col-1-3">
                  Form layout column 1
              </div>
              <div class="form-l_col form-l_col-1-3">
                  Form layout column 2
              </div>
              <div class="form-l_col form-l_col-1-3">
                  Form layout column 3
              </div>
          </div>
        codenotes:
          - |
            Structural cheat sheet:
            -----------------------
            .form-l
              .form-l_col.form-l_col-1-3
        notes:
          - ".form-l_col-1-3 elements are stacked for small screens. When the
            viewport reaches 600px they transform into columns with one half the
            width of the container. When the viewport reaches 768px their width
            updates to one third of the container."
      - name: "Form layout modifier: flush"
        markup: |
          <div class="form-l form-l__flush">
              <div class="form-l_col form-l_col-1-3">
                  Form layout column 1
              </div>
              <div class="form-l_col form-l_col-1-3">
                  Form layout column 2
              </div>
              <div class="form-l_col form-l_col-1-3">
                  Form layout column 3
              </div>
          </div>
        codenotes:
          - .form-l.form-l__flush
        notes:
          - "Form layout columns have left and right gutters. If you want the
            first and last column in each row to sit flush left/right
            respectively then use the .form-l__flush modifier."
      - name: Form layout inset
        markup: |
          <div class="form-l form-l__flush">
              <div class="form-l_col form-l_col-1-2 form-l-inset">
                  <div class="form-l-inset_container">
                      <input class="cf-input cf-input_hidden" type="radio" name="cf-input-example_default-inset" id="cf-input-example_default-inset">
                      <label class="cf-input_label" for="cf-input-example_default-inset">
                          <span class="cf-input_text">Yes</span>
                      </label>
                      <span class="cf-input_radio"></span>
                  </div>
              </div>
              <div class="form-l_col form-l_col-1-2 form-l-inset">
                  <div class="form-l-inset_container">
                      <input class="cf-input cf-input_hidden" type="radio" name="cf-input-example_default-inset" id="cf-input-example_default-inset2">
                      <label class="cf-input_label" for="cf-input-example_default-inset2">
                          <span class="cf-input_text">No</span>
                      </label>
                      <span class="cf-input_radio"></span>
                  </div>
              </div>
          </div>
        codenotes:
          - |
            Structural cheat sheet:
            -----------------------
            .form-l-inset
              .form-l-inset_container
        notes:
          - ".form-l-inset_container elements have larger target areas for easier user interaction."
    tags:
      - cf-forms
*/

.form-l-inset {
    border-right-width: 2.5px;
    + .form-l-inset { border-left-width: 2.5px; }
    &:last-child { border-right-width: 15px; }

      .form-l-inset_container {
          background: @input-inset-bg;

          .cf-input_label {
              margin: 0;
              padding: unit( ( @grid_gutter-width / 2 ) / @base-font-size-px, em )
                   unit( ( @grid_gutter-width / 2 ) / @base-font-size-px, em )
                   unit( ( @grid_gutter-width / 1.75 ) / @base-font-size-px, em );
          }

          .cf-input_text {
              margin-left: unit( @grid_gutter-width / @base-font-size-px, em );
          }

          .cf-input_radio,
          .cf-input_checkbox {
              position: absolute;
              top: unit( ( @grid_gutter-width / 1.75 ) / @base-font-size-px, em );
              left: 15px;
              z-index: 3;
          }

          &:hover,
          &:focus,
          &.focus {
              .cf-input_checkbox,
              .cf-input_radio {
                  box-shadow: 0px 0px 0px 2px @input-border-focus;
                  // Older IE does not support border-radius or box-shadow it's ok to
                  // use outline here.
                  .lt-ie9 & {
                      outline: 1px solid @input-border-focus;
                  }
              }
          }

        &.selected .cf-input_label,
        &.focus .cf-input_label,
        &:focus .cf-input_label,
        &:hover .cf-input_label,
        input:focus + .cf-input_label,
        input:checked + .cf-input_label     {
            outline: 1px solid @input-border-focus;
        }

        &.selected .cf-input_label,
        input:checked + .cf-input_label {
            background-color: @input-inset-selected;
        }
    }
}
/* topdoc
  name: EOF
  eof: true
*/
