/* ==========================================================================
   cfgov-refresh
   layout
   ========================================================================== */

/* topdoc
  name: Base layout
  family: cfgov-layout
  patterns:
    - name: Wrapper class
      markup: |
        <div class="wrapper">
            Wrapper
        </div>
      notes:
        - "Turns an element into a cf-grid wrapper at 801px and above."
        - "Includes some explicit declarations for IE8 due to the fact that it
           doesn't support media queries."
  tags:
    - cfgov-layout
*/

.wrapper {
    .respond-to-min(801px, {
        .grid_wrapper();
    });
}

.lt-ie9 {
    & .wrapper {
        max-width: 960px;
    }

    & body {
        min-width: 800px;
    }
}


/* topdoc
  name: Header
  family: cfgov-layout
  patterns:
    - name: Logo
      markup: |
        <a href="/">
            <img class="logo u-js-only"
                 src="../../static/img/logo.svg"
                 onerror="this.onerror=null;this.src='/static/img/logo.png';"
                 alt="Consumer Financial Protection Bureau"
                 width="262"
                 height="66">
            <noscript>
                <img class="logo logo__no-js"
                     src="../../static/img/logo.png"
                     alt="Consumer Financial Protection Bureau"
                     width="262"
                     height="66">
            </noscript>
        </a>
      notes:
        - "The `onerror` attribute allows for the usage of an SVG logo for
           browsers that support SVG, with a fallback to PNG for browsers that
           don't."
        - "The `noscript` element displays the PNG fallback in the event that
           JavaScript is not available."
        - "The path in the `src` attribute has been adjusted for these docs."
    - name: Miscellaneous stuff (top right)
      markup: |
        <div class="header_misc">
            Contact us: <a class="header_misc_tel" href="tel:8554112372">(855) 411-2372</a>
            <a class="header_misc_es">Espa√±ol</a>
        </div>
  tags:
    - cfgov-layout
*/

.logo {
    margin: @grid_gutter-width
            (@grid_gutter-width / 2)
            unit(20px / @base-font-size-px, em)
            (@grid_gutter-width / 2);
    vertical-align: middle; // removes typical inline vertical whitespace

    .respond-to-max(800px, {
        width: 160px;
        height: 40px;
        margin: 10px;
    });
}

.logo__no-js {
    display: none;
}

.no-js .logo__no-js {
    display: block;
}

.header_misc {
    display: none;

    .respond-to-min(801px, {
        display: block;
        margin: @grid_gutter-width
                (@grid_gutter-width / 2)
                (@grid_gutter-width / 2);
        position: absolute;
        top: 0;
        right: @grid_gutter-width / 2;
        color: @gray;
        .webfont-regular();

        &_tel {
            padding-right: @grid_gutter-width / 2;
            border-right: 1px solid @gray-50;
            margin-right: unit(@grid_gutter-width / 2 / @base-font-size-px, em) - 0.25em;
                // subtracting typical inline horizonal whitespace above
            .u-link__colors(@darkgray);
        }

        &_es {
            .h5();
            .u-link__border();
        }
    });
}


/* topdoc
  name: Primary navigation
  family: cfgov-layout
  patterns:
    - name: Desktop mega menu
      markup: |
        
      notes:
        - 
  tags:
    - cfgov-layout
*/

.primary-nav_top-level-list > .list_item > .list_link {
    .u-link__colors(@black, @green);
    .webfont-regular();

    &__disabled {
        color: @gray-50 !important;
        border: none !important;
    }
}

.desktop-menu_horizontal-list .list_link {
    // override standard visited link color
    .u-link__colors(@pacific, @pacific, @pacific-50, @pacific, @navy);
}

// ============================================================ SLIDING NAV TEST

.respond-to-max(800px, {

    html,
    body {
        height: 100%;
    }

    .primary-nav_top-level-list.list-expanding {
        // Nested list borders
        // Negative bottom margin to remove duplicate bottom border
        & .list-expanding {
            margin: 0 0 -1px;
        }
     
        & .list_item {
            display: block;
            border-bottom: 1px solid @gray-50;
            margin-right: 0; // overriding .list-horizontal .list_item

            &:first-child {
                border-top: 1px solid @gray-50;
            }
        }

        & .list_item__plain {
            border-bottom: 0;
            &:first-child {
                border-top: 0;
            }
        }

        & .list_item > a,
        & .list_item > span {
            display: block;
            padding: (@grid_gutter-width / 2)
                     @grid_gutter-width
                     (@grid_gutter-width / 2)
                     (@grid_gutter-width / 2);
            position: relative;
            background: @gray-20;
            font-size: unit(18px / @base-font-size-px, em);
        }
        & > .list_item > a:hover {
            background: @white;
            color: @darkgray;
        }
        & > .list_item > a:focus {
            background: @white;
            color: @darkgray;
        }
        & > .list_item > a:active {
            background: @gray-10;
            color: @darkgray;
        }
        & > .list_item > .list_link__disabled {
            background: @gray-20 !important;
        }

        // Two levels deep
        & .list-expanding .list-expanding_list-item > a,
        & .list-expanding .list-expanding_list-item > span {
            padding-left: @grid_gutter-width;
            background: @gray-10;
            font-size: 1em;
        }

        // Three levels deep
        & .list-expanding .list-expanding .list-expanding_list-item > a,
        & .list-expanding .list-expanding .list-expanding_list-item > span {
            padding-left: @grid_gutter-width * 1.5;
            background: @gray-5;
        }

        // Give the expanding trigger an icon
        .list-expanding_trigger:after {
            position: absolute;
            right: @grid_gutter-width / 2;
            font-family: 'CFPB Minicons';
            font-style: normal;
            font-weight: normal;
            -webkit-font-smoothing: antialiased;
        }
        .list-expanding_trigger[aria-pressed="false"]:after {
            content: "\e002";
        }
        .list-expanding_trigger[aria-pressed="true"]:after {
            content: "\e006";
        }

        // Hide a child list if the trigger is not pressed
        .list-expanding_trigger[aria-pressed="false"] .list-expanding_child-list {
            display: none;
        }
    }

    .sliding-nav {
        .u-clearfix();
        // Putting the navigation background here instead of on .sliding-nav_nav
        // is a trick to get the bg of the nav to match the height of .sliding-nav_page
        background: @gray;
    }
    .sliding-nav.is-open {
        overflow: hidden;
    }

    .sliding-nav_page {
        float: left;
        -webkit-box-sizing: border-box;
           -moz-box-sizing: border-box;
                box-sizing: border-box;
        width: 100%;
        background: @white;
        -webkit-transition: .2s margin-right ease-in, .2s box-shadow ease-in;
    }
    .is-open .sliding-nav_page {
        border-left: 1px solid @gray-80;
        margin-right: -80%;
        position: relative;
        box-shadow: -6px 0 0 rgba(16, 24, 32, 0.2);
    }

    // This overlays the main content and when clicked closes the menu
    .sliding-nav_page-overlay {
        position: relative;
    }
    .sliding-nav_page-overlay:before {
        position: absolute;
        z-index: 999;
        // background: @black;
        opacity: 0;
        -webkit-transition: .2s opacity ease-in;
    }
    .is-open .sliding-nav_page-overlay:before {
        content: "";
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        // opacity: 0.7;
    }

    .sliding-nav_page.is-scroll-disabled {
        position: fixed;
        right: 0;
        -webkit-transition: .2s right ease-in;
    }
    .is-open .sliding-nav_page.is-scroll-disabled {
        position: fixed;
        right: -80%;
        margin-right: 0;
        -webkit-transition: none;
    }

    .sliding-nav_nav {
        float: left;
        width: 80%;
        height: 101%;
        margin-left: -100%;
        -webkit-transition: .2s margin-left ease-in;
    }
    .is-open .sliding-nav_nav {
        margin-left: 0;
    }

    .sliding-nav_nav .list-expanding {
        margin: 0;
    }

    .sliding-nav_trigger {
        display: block;
        width: 60px;
        padding: 10px;
        border: none;
        border-right: 1px solid @gray-50;
        float: left;
        background: @white;
        color: @gray;
        font-size: 1.5em;
        line-height: 40px;

        &:focus {
            outline: 1px dotted @black;
        }
        &:active {
            background: @gray-10;
            color: @black;
        }
    }

});

// ======================================================= DESKTOP MENU TEST

.respond-to-min(801px, {

    .sliding-nav_trigger {
        display: none;
    }

    .primary-nav {
        position: relative;
        top: 116px; // magic number - dependent on height of logo and its vertical padding
    }
    [role="banner"] {
        position: relative;
        top: -54px; // magic number - dependent on height of horizontal navbar
    }

    // .desktop-menu.l-wrapper-outer {
    //     position: relative;
    //     overflow: visible;
    //     color: @black;
    // }

    .desktop-menu .l-wrapper-inner {
        position: static;
        overflow: visible;
        padding-left: @grid_gutter-width / 2;
    }

    .primary-nav_top-level-list {
        margin-bottom: 0;
    }

    .primary-nav_top-level-list.list__horizontal > .list_item {
        display: inline-block;
        vertical-align: top;

        &:hover > .list_link,
        &:focus > .list_link {
            padding-bottom: @grid_gutter-width - 6px;
            border-bottom: 6px solid @green;
            color: @green;
            // transition: 0.1s padding-bottom linear,
            //             0.1s border-bottom linear;
        }
    }

    .primary-nav_top-level-list > .list_item > .list_link {
        display: block;
        padding-bottom: @grid_gutter-width;
        margin: 0 (@grid_gutter-width / 2); // margin on link for larger hit area
        font-size: unit(18px / @base-font-size-px, em);
    }

    // Hide only when js is available
    // .js .desktop-menu_full-wrapper {}
    .desktop-menu_full-wrapper {
        width: 100%;
        max-height: 0;
        overflow: hidden;
        position: absolute;
        left: 0;
        z-index: 100;
        -webkit-transform: translate3d(0,0,0); // Maybe this will kick on the gpu?
    }

    // Expand the menu by looking for aria attributes.
    // This will help us to keep our eye on a11y.
    .desktop-menu_full-wrapper[aria-expanded="true"] {
        z-index: 200;
        //min-height: 21em;
        max-height: 15em;
        -webkit-transform: translate3d(0,0,0); // Maybe this will kick on the gpu?
    }

    // Only use transitions when allowed, js controls the transition toggling logic
    // Transition off
    .has-transition .desktop-menu_full-wrapper {
        transition: 0.25s max-height linear;
    }
    // Transition on
    .has-transition .desktop-menu_full-wrapper[aria-expanded="true"] {
        transition: 0.275s max-height ease-out;
    }

    .desktop-menu_full-wrapper_decoration {
        padding: @grid_gutter-width 0;
        background: @gray-5;
        border-top: 1px solid @gray-50;
        border-bottom: 4px solid @gray-50;
    }

    .desktop-menu_full-wrapper > ul {
        margin-top: 0;
        margin-bottom: 0;
    }

    .desktop-menu_vertical-list a,
    .desktop-menu_horizontal-list a,
    .desktop-menu_horizontal-list-small a {
        display: inline-block;
        .webfont-regular();
    }

    // Horizontal list
    .desktop-menu_horizontal-list {
        margin-top: 0;
        margin-bottom: 0;
    }

    .desktop-menu_horizontal-list.list__horizontal > .list_item {
        margin: 0 @grid_gutter-width / 2;
    }

});



/* topdoc
  name: Content layouts
  family: cfgov-layout
  patterns:
    - name: Standard content columns
      markup: |
        <div class="content-l">
            <div class="content-l_col content-l_col-1">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Full-width column (spans 12 columns)
                </div>
            </div>
            <div class="content-l_col content-l_col-1-2">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Half-width column (spans 6/12 columns)
                </div>
            </div>
            <div class="content-l_col content-l_col-1-2">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Half-width column (spans 6/12 columns)
                </div>
            </div>
            <div class="content-l_col content-l_col-1-3">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Third-width column (spans 4/12 columns)
                </div>
            </div>
            <div class="content-l_col content-l_col-1-3">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Third-width column (spans 4/12 columns)
                </div>
            </div>
            <div class="content-l_col content-l_col-1-3">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Third-width column (spans 4/12 columns)
                </div>
            </div>
            <div class="content-l_col content-l_col-2-3">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;">
                    Two thirds-width column (spans 8/12 columns)
                </div>
            </div>
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .content-l
            .content-l_col.content-l_col-(RATIO)
        - .content-l_col.content-l_col-1
        - .content-l_col.content-l_col-1-2
        - .content-l_col.content-l_col-1-3
        - .content-l_col.content-l_col-2-3
      notes:
        - "These layout classes have breakpoints that are specific for use
           within .content_main."
        - "Since .content-l_col's are nested within .content_main extra
           margins will occur. The .content-l container uses the
           grid_nested-col-group mixin to counter this."
        - "Note that the divs with inline styles are for demonstration purposes
           only and should not be used in production."
    - name: .content-l_col__stack-on-cols (modifier)
      markup: |
            <div class="content-l_col content-l_col__stack-on-cols content-l_col-1-2">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;">
                    Half-width column from 600px to 801px
                </div>
            </div>
            <div class="content-l_col content-l_col__stack-on-cols content-l_col-1-2">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;">
                    Half-width column from 600px to 801px
                </div>
            </div>
      codenotes:
        - .content-l_col__stack-on-cols
      notes:
        - "A modifier that allows you to have columns that behave as normal but
           stack at the larger multi-column views. For example a
           .content-l_col-1-2 would stack as normal from 0-599px, at 600px it
           would convert into a column, and at 801px it would stack again."
        - "This is really only useful for .content-l_col-1-2 since there is a
           decent range between when it becomes a column (600px) to when the
           modifier converts it back into a full-width container (801px).
           .content-l_col-1-3 on the other hand would have a much smaller range,
           768 to 801px."
  tags:
    - cfgov-layout
*/

.content-l {
    // Used to position __divider modifiers
    position: relative;

    .respond-to-min(600px, {
        .grid_nested-col-group();
    });
}

.content-l_col {
    & + & {
        margin-top: unit(@grid_gutter-width / @base-font-size-px, em);
    }
    .respond-to-min(600px, {
        &.content-l_col-1-2 + &.content-l_col-1-2 {
            margin-top: 0;
        }
    });
    .respond-to-min(768px, {
        &.content-l_col-1-3 + &.content-l_col-1-3,
        &.content-l_col-3-8 + &.content-l_col-3-8,
        &.content-l_col-3-8 + &.content-l_col-5-8,
        &.content-l_col-5-8 + &.content-l_col-3-8 {
            margin-top: 0;
        }
    });
}

.content-l_col-1 {
    .respond-to-min(600px, {
        .grid_column(12);
    });
}

.content-l_col-1-2 {
    .respond-to-min(600px, {
        .grid_column(6);
    });
}

.content-l_col-1-3 {
    .respond-to-min(600px, {
        .grid_column(12);
    });
    .respond-to-min(768px, {
        .grid_column(4);
    });
}

.content-l_col-2-3 {
    .respond-to-min(600px, {
        .grid_column(12);
    });
    .respond-to-min(768px, {
        .grid_column(8);
    });
}

.content-l_col-3-8 {
    .respond-to-min(600px, {
        .grid_column(12);
    });
    .respond-to-min(768px, {
        .grid_column(3, 8);
    });
}

.content-l_col-5-8 {
    .respond-to-min(600px, {
        .grid_column(12);
    });
    .respond-to-min(768px, {
        .grid_column(5, 8);
    });
}

.content-l_col__stack-on-cols {
    .respond-to-min(801px, {
        .grid_column(12);
    });
}


/* topdoc
  name: Content layout column dividers
  family: cfgov-layout
  notes:
    - "Adds dividers between specified .content-l_col-X-X classes."
    - "Layout dividers work in conjunction with .content-l_col-X-X elements and
       have specific needs depending on which column element variant they are
       attached to. For example .content-l_col-1-2 has different divider needs
       than .content-l_col-1-3 because they break to single columns at different
       breakpoints."
    - "Dividers use absolute positioning relative to the .content-l element and
       depends on .content-l using `position: relative;`. This allows vertical
       dividers to span the height of the tallest column. Just be aware that if
       you have more than one row of columns, and each row has columns of
       different widths, the borders will cause unwanted overlapping since they
       will span the height of the entire .content-l element."
  patterns:
    - name: .content-l_col__before-divider (modifier)
      markup: |
        <div class="content-l">
            <div class="content-l_col content-l_col-1-2">
                Half-width column (spans 6/12 columns)
            </div>
            <div class="content-l_col content-l_col-1-2 content-l_col__before-divider">
                Half-width column (spans 6/12 columns)
            </div>
        </div>
        <br>
        <!-- Starting a new .content-l so that the dividers from
             .content-l_col.content-l_col-1-2.content-l_col__before-divider
             won't overlap the .content-l_col-1-3 columns. -->
        <div class="content-l">
            <div class="content-l_col content-l_col-1-3">
                Third-width column (spans 4/12 columns)
            </div>
            <div class="content-l_col content-l_col-1-3 content-l_col__before-divider">
                Third-width column (spans 4/12 columns)
            </div>
            <div class="content-l_col content-l_col-1-3 content-l_col__before-divider">
                Third-width column (spans 4/12 columns)
            </div>
        </div>
      codenotes:
        - .content-l_col__before-divider
  tags:
    - cfgov-layout
*/

.content-l_col__before-divider.content-l_col-1-2 {
    .respond-to-max(599px {
        .grid_column__top-divider();
    });
    .respond-to-min(600px, {
        .grid_column__left-divider();
    });
}

.content-l_col__before-divider.content-l_col-1-3 {
    .respond-to-max(767px {
        .grid_column__top-divider();
    });
    .respond-to-min(768px, {
        .grid_column__left-divider();
    });
}


/* topdoc
  name: Content bar
  family: cfgov-layout
  patterns:
    - name: A 10 pixel bar that divides the header or hero from the main content
      markup: |
        <div class="content_bar"></div>
      notes:
        - "This is necessary because we don't have a predictable place to put a
           full-width border. It needs to be under the hero on pages with
           heroes, but under the header if there is no hero."
        - ".content_bar must come after .content_hero but before .content_wrapper"
  tags:
    - cfgov-layout
*/

.content_bar {
    height: 10px;
    background: @green;
}


/* topdoc
  name: Content line
  family: cfgov-layout
  patterns:
    - name: "A 1 pixel edge to edge bar that can divide content."
      markup: |
        <div class="content_line"></div>
  tags:
    - cfgov-layout
*/

.content_line {
    height: 1px;
    background: @gray-50;
}


/* topdoc
  name: Main content and sidebar
  family: cfgov-layout
  patterns:
    - name: Standard layout for the main content area and sidebar
      markup: |
        <main class="content" id="main" role="main">
            <section class="content_hero" style="background: #E3E4E5">
                Content hero
            </section>
            <div class="content_bar"></div>
            <div class="wrapper content_wrapper">
                <section class="content_main">
                    Main content area
                </section>
                <aside class="content_sidebar" style="background: #F1F2F2">
                    Sidebar
                </aside>
            </div>
        </main>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          main.content
            .content_hero
            .content_bar
            .content_wrapper
              .content_sidebar
              .content_main
      notes:
        - "By default .content_main and .content_sidebar stack vertically. When
           using the modifiers described below to create columns, the columns
           will remain stacked for smaller screens and then convert to to
           columns at 801px."
        - ".content_bar must come after .content_hero (if it exists) but before
           .content_wrapper."
        - "Inline styling is for demonstration purposes only; do not include it
           in your markup."
    - name: Left-hand navigation layout
      markup: |
        <main class="content content__1-3" id="main" role="main">
            <div class="content_bar"></div>
            <div class="wrapper content_wrapper">
                <aside class="content_sidebar">
                    Section navigation
                </aside>
                <section class="content_main">
                    <h2>Main content area</h2>
                    <p>
                        Lorem ipsum dolor sit amet, consectetur adipisicing elit.
                        Cum corrupti tempora nam nihil qui mollitia consectetur
                        corporis nemo culpa dolorum! Laborum at eos deleniti
                        consequatur itaque officiis debitis quisquam! Provident!
                    </p>
                </section>
            </div>
        </main>
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
      codenotes:
        - .content__1-3
      notes:
        - "Add a class of .content__L-R to main.content to determine the width
           ratio of .content_main and .content_sidebar, where 'L' is the
           left-hand item and 'R' is the right-hand item. The two common
           configurations are 1-3 (sidebar on the left, content on the right, in
           a ratio of 1:3) and 2-1 (content on the left, sidebar on the right,
           in a ratio of 2:1). It is assumed that the content is wider than the
           sidebar."
    - name: Right-hand sidebar layout
      markup: |
        <main class="content content__2-1" id="main" role="main">
            <div class="content_bar"></div>
            <div class="wrapper content_wrapper">
                <section class="content_main">
                    <h2>Main content area</h2>
                    <p>
                        Lorem ipsum dolor sit amet, consectetur adipisicing elit.
                        Cum corrupti tempora nam nihil qui mollitia consectetur
                        corporis nemo culpa dolorum! Laborum at eos deleniti
                        consequatur itaque officiis debitis quisquam! Provident!
                    </p>
                </section>
                <aside class="content_sidebar" style="background: #F1F2F2">
                    Sidebar
                </aside>
            </div>
        </main>
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
      codenotes:
        - .content__2-1
      notes:
        - "Add a class of .content__L-R to main.content to determine the width
           ratio of .content_main and .content_sidebar, where 'L' is the
           left-hand item and 'R' is the right-hand item. The two common
           configurations are 1-3 (sidebar on the left, content on the right, in
           a ratio of 1:3) and 2-1 (content on the left, sidebar on the right,
           in a ratio of 2:1). It is assumed that the content is wider than the
           sidebar."
        - "Inline styling is for demonstration purposes only; do not include it
           in your markup."
    - name: Narrow content column option
      markup: |
        <main class="content content__2-1" id="main" role="main">
            <div class="content_bar"></div>
            <div class="wrapper content_wrapper">
                <section class="content_main content_main__narrow">
                    <h2>Main content area</h2>
                    <p>
                        Lorem ipsum dolor sit amet, consectetur adipisicing elit.
                        Cum corrupti tempora nam nihil qui mollitia consectetur
                        corporis nemo culpa dolorum! Laborum at eos deleniti
                        consequatur itaque officiis debitis quisquam! Provident!
                    </p>
                </section>
                <aside class="content_sidebar" style="background: #F1F2F2">
                    Sidebar
                </aside>
            </div>
        </main>
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
      codenotes:
        - .content_main__narrow
      notes:
        - "Add a class of .content_main__narrow to .content_main to get a
           one-column (in a 12-column grid) gutter on the right side."
        - "Inline styling is for demonstration purposes only; do not include it
           in your markup."
    - name: Flush bottom modifier
      markup: |
        <main class="content content__1-3" id="main" role="main">
            <div class="content_bar"></div>
            <div class="wrapper content_wrapper">
                <aside class="content_sidebar content__flush-bottom">
                    Side with no bottom padding...
                </aside>
                <section class="content_main content__flush-bottom">
                    Main content with no bottom padding...
                    <div class="content_block
                                content_block__flush-bottom
                                content_block__flush-sides
                                content_block__bg">
                        .content__flush-bottom is very useful when you have a
                        content block inside of .content_main with a background
                        and flush sides.
                    </div>
                </section>
            </div>
        </main>
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
      codenotes:
        - .content__flush-bottom
      notes:
        - "Add a class of .content__flush-bottom to .content_main or
           content_sidebar to remove bottom padding."
    - name: Flush top modifier (only on small screens)
      markup: |
        <main class="content content__1-3" id="main" role="main">
            <div class="content_bar"></div>
            <div class="wrapper content_wrapper">
                <aside class="content_sidebar content__flush-top-on-small">
                    Side with no top padding on small screens...
                </aside>
                <section class="content_main">
                    Main content
                </section>
            </div>
        </main>
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
      codenotes:
        - .content__flush-top-on-small
      notes:
        - "Add a class of .content__flush-top-on-small to .content_main or
           .content_sidebar to remove top padding on small screens only.
           'Small' screens in this case refers to the breakpoint where
           .content_main and .content_sidebar single column layout."
    - name: Flush all modifier (only on small screens)
      markup: |
        <main class="content content__1-3" id="main" role="main">
            <div class="content_bar"></div>
            <div class="wrapper content_wrapper">
                <aside class="content_sidebar content__flush-all-on-small">
                    Side with no padding or border-based gutters on small screens...
                </aside>
                <section class="content_main">
                    Main content
                </section>
            </div>
        </main>
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
      codenotes:
        - .content__flush-all-on-small
      notes:
        - "Add a class of .content__flush-all-on-small to .content_main or
           .content_sidebar to remove all padding and border-based gutters on
           small screens only. 'Small' screens in this case refers to the
           breakpoint where .content_main and .content_sidebar single column layout."
  tags:
    - cfgov-layout
*/

.content_intro,
.content_main,
.content_sidebar {
    padding: unit(@grid_gutter-width / @base-font-size-px, em)
             unit((@grid_gutter-width / 2) / @base-font-size-px, em);

    .respond-to-min(600px, {
        .grid_column(12);
        padding: unit((@grid_gutter-width * 2) / @base-font-size-px, em)
                 unit((@grid_gutter-width / 2) / @base-font-size-px, em);
    });

    .respond-to-min(801px, {
        padding: unit((@grid_gutter-width * 2) / @base-font-size-px, em)
                 0;
    });
}

.respond-to-min(801px, {
    .content_intro {
        .grid_column(12);
    }
});

// Set up standard multi-column content area layouts
.respond-to-min(801px, {
    .content {
        &__1-3 {
            .content_sidebar {
                .grid_column(3);

                padding-right: unit(@grid_gutter-width / @base-font-size-px, em);
            }
            .content_main {
                .grid_column(9);
                position: relative;

                &:after {
                    content: '';
                    border-left: 1px solid @gray-50;
                    position: absolute;
                    top: unit((@grid_gutter-width * 2) / @base-font-size-px, em);
                    bottom: 0;
                    left: unit(-1 * @grid_gutter-width / @base-font-size-px, em);
                }
            }
        }

        &__2-1 {
            .content_main {
                .grid_column(8);

                &:after {
                    right: unit(-1 * @grid_gutter-width / @base-font-size-px, em);
                }
            }
            .content_sidebar {
                .grid_column(4);

                padding-left: unit(@grid_gutter-width / @base-font-size-px, em);
            }
        }
    }
}); // END min-width 801 block

.respond-to-min(1024px, {
    .content {
        &__2-1 {
            .content_main__narrow {
                .grid_column(7, @grid_total-columns, 0, 1);
            }
        }
    }
});

.content__flush-bottom {
    padding-bottom: 0;
}

.content__flush-top-on-small {
    .respond-to-max(800px, {
        padding-top: 0;
    });
}

.content__flush-all-on-small {
    .respond-to-max(800px, {
        padding: 0;
        border-width: 0;
    });
}


/* topdoc
  name: Content block
  family: cfgov-layout
  notes:
    - ".content_block elements are built to be used within .content_main."
  patterns:
    - name: Standard content block example
      markup: |
        Main content...
        <div class="content_block">
            Content block
        </div>
        <div class="content_block">
            Content block
        </div>
        <div class="content_block">
            Content block
        </div>
      codenotes:
        - .content_block
      notes:
        - "Useful for when you need some consistent margin between content
           blocks within .content_main."
    - name: Flush-top modifier
      markup: |
        Main content...
        <div class="content_block content_block__flush-top">
            Content block with no top margin.
        </div>
        <div class="content_block">
            Content block
        </div>
      codenotes:
        - .content_block.content_block__flush-top
      notes:
        - "Removes the top margin from .content_block."
    - name: Flush-bottom modifier
      markup: |
        Main content...
        <div class="content_block content_block__flush-bottom">
            Content block with no bottom margin.
        </div>
        <div class="content_block content_block__flush-top">
            Content block with no top margin.
        </div>
      codenotes:
        - .content_block.content_block__flush-bottom
      notes:
        - "Removes the bottom margin from .content_block."
    - name: Flush-sides modifier
      markup: |
        <main class="content content__1-3" id="main" role="main">
            <div class="wrapper content_wrapper">
                <aside class="content_sidebar">
                    Section navigation
                </aside>
                <section class="content_main">
                    Main content...
                    <aside class="content_block content_block__flush-sides">
                        Content block with no side margins.
                    </aside>
                </section>
            </div>
        </main>
      codenotes:
        - .content_block.content_block__flush-sides
      notes:
        - "Removes the side margin from .content_block."
    - name: Background modifier
      markup: |
        Main content...
        <div class="content_block content_block__bg">
            Content block with a background
        </div>
      codenotes:
        - .content_block.content_block__bg
      notes:
        - "Adds a background color and padding to .content_block."
    - name: Background and flush-sides modifier combo example
      markup: |
        <main class="content content__1-3" id="main" role="main">
            <div class="wrapper content_wrapper">
                <aside class="content_sidebar">
                    Section navigation
                </aside>
                <section class="content_main content__flush-bottom">
                    Main content...
                    <div class="content_block content_block__flush-sides content_block__bg">
                        Content block with a background and flush sides
                    </div>
                </section>
            </div>
        </main>
      codenotes:
        - .content_block.content_block__sides.content_block__bg
      notes:
        - "This is an example of combining modifiers to get a flush padded bg
           with a .content_block."
    - name: Sub blocks
      markup: |
        <div class="content_block content_block__sub">
            <div style="background: #F1F2F2; padding: 8px;">
                Sub content block
            </div>
        </div>
        <div class="content_block content_block__sub">
            <div style="background: #F1F2F2; padding: 8px;">
                Sub content block
            </div>
        </div>
        <div class="content_block content_block__sub">
            <div style="background: #F1F2F2; padding: 8px;">
                Sub content block
            </div>
        </div>
      codenotes:
        - .content_block.content_block__sub
      notes:
        - "Useful for when you need some consistent margins between
           .content_block's that are nested within other content_blocks."
        - "Note that the divs with inline styles are for demonstration purposes
           only and should not be used in production."
    - name: Mixing content blocks with content layouts
      markup: |
        <div class="content-l">
            <div class="content_block content-l_col content-l_col-1-2">
                <div style="background: #F1F2F2; padding: 8px;">
                    Content block that is also a content column.
                    Notice how my top margins only exist on smaller screens when
                    I need to stack vertically.
                </div>
            </div>
            <div class="content_block content-l_col content-l_col-1-2">
                <div style="background: #F1F2F2; padding: 8px;">
                    Content block that is also a content column.
                    Notice how my top margins only exist on smaller screens when
                    I need to stack vertically.
                </div>
            </div>
        </div>
      codenotes:
        - .content_block.content-l_col
      notes:
        - "You can safely combine .content_block__sub with .content-l_col to
           achieve a column-based layout at larger screens with no top margins
           and a vertical layout at smaller screens that do have margins."
        - "Note that the divs with inline styles are for demonstration purposes
           only and should not be used in production."
  tags:
    - cfgov-layout
*/

.content_block {
    margin-top: unit((@grid_gutter-width * 2) / @base-font-size-px, em);
    margin-bottom: unit((@grid_gutter-width * 2) / @base-font-size-px, em);

    &__flush-top {
        margin-top: 0 !important;
    }

    &__flush-bottom {
        margin-bottom: 0 !important;
    }

    &__flush-sides {
        margin-right: -(@grid_gutter-width / 2);
        margin-left: -(@grid_gutter-width / 2);
        .respond-to-min(600px, {
            margin-right: -@grid_gutter-width;
            margin-left: -@grid_gutter-width;
        });
    }

    &__bg {
        padding: unit(@grid_gutter-width / @base-font-size-px, em)
                 unit((@grid_gutter-width / 2) / @base-font-size-px, em);
        background: @gray-10;
        .respond-to-min(600px, {
            padding: unit(45 / @base-font-size-px, em)
                     unit(@grid_gutter-width / @base-font-size-px, em);
        });
    }

    &__sub {
        margin-top: unit(30px / @base-font-size-px, em);
        margin-bottom: unit(30px / @base-font-size-px, em);
    }

    // Overrides for when .content_block is also a column
    .content-l_col&,
    .content-l_col&__sub {
        .respond-to-min(600px, {
            margin-top: 0;
        });
    }
}


/* topdoc
  name: Sidebar items
  family: cfgov-layout
  patterns:
    - name: Sidebar item spacing
      markup: |
        <section class="content_sidebar-item related-posts" style="background: #F1F2F2">
            Related posts
        </section>
        <section class="content_sidebar-item related-news" style="background: #F1F2F2">
            Related news
        </section>
      notes:
        - "Gives some vertical margin between sidebar items."
        - "Inline styling is for demonstration purposes only; do not include it
           in your markup."
  tags:
    - cfgov-layout
*/

.content_sidebar-item + .content_sidebar-item {
    margin-top: unit(60px / @base-font-size-px, em);
}


/* topdoc
  name: Bleedbar sidebar styling
  family: cfgov-layout
  patterns:
    - name: Give the sidebar a background color that bleeds off the edge of the screen
      markup: |
        <main class="content content__2-1 content__bleedbar" id="main" role="main">
            <section class="content_hero" style="background: #E3E4E5">
                Content hero
            </section>
            <div class="content_bar"></div>
            <div class="wrapper content_wrapper">
                <section class="content_main">
                    Main content area
                </section>
                <aside class="content_sidebar">
                    Bleeding sidebar
                </aside>
            </div>
        </main>
      codenotes:
        - ".content__bleedbar"
      notes:
        - "Simply add class .content__bleedbar to main.content."
        - "Only supports sidebars on the right, for now."
        - "Inline styling is for demonstration purposes only; do not include it
           in your markup."
  tags:
    - cfgov-layout
*/

.content__bleedbar {

    // Overrides the border between main and sidebar, because bleedbar makes its own.
    .content_main:after {
        content: none;
    }

    .content_sidebar {
        padding: unit(@grid_gutter-width / @base-font-size-px, em)
                 unit((@grid_gutter-width / 2) / @base-font-size-px, em);
        background: @gray-10;
    }

    .respond-to-min(801px, {
        // Prevent pseudo element background from creating horizontal scrollbar.
        overflow: hidden;

        .content_sidebar {
            padding: unit((@grid_gutter-width * 2) / @base-font-size-px, em)
                     0
                     unit((@grid_gutter-width / 2) / @base-font-size-px, em)
                     unit(@grid_gutter-width / @base-font-size-px, em);
            margin-left: 0;
            position: relative;
            z-index: 1;

            // Remove background color from actual sidebar.
            // It will now be provided by pseudoelement :after sidebar parent.
            background: transparent;

            .lt-ie8 & {
                // Make sure the sidebar still has a background in IE7.
                padding-right: @grid_gutter-width;
                background: @gray-10;
            }
        }

        .content_wrapper:after {
            // Create faux sidebar background.
            content: '';
            display: block;
            width: 9999px;
            border-left: 1px solid @gray-50;
            height: 100%;
            position: absolute;
            top: 0;
            z-index: 0;
            // The three in the below calculation is a magic number.
            // Not entirely sure what to do about it right now.
            margin-left: (@grid_gutter-width / 3);
            background: @gray-10;
        }

        &.content__2-1 .content_wrapper:after {
            left: 66.666666667%;    
        }
        &.content__3-1 .content_wrapper:after {
            left: 75%;
        }

    });
}


/* topdoc
  name: Footer
  family: cfgov-layout
  patterns:
    - name: Standard footer styling
      markup: |
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
  tags:
    - cfgov-layout
*/

.footer {
    padding: 1.5em 0;
    border-top: 3px solid @green;
    background: @gray-10;
}


/* topdoc
    name: EOF
    eof: true
*/
