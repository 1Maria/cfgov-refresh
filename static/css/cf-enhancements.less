/* ==========================================================================
   cfgov-refresh
   capital framework enhancements
   ========================================================================== */

/* topdoc
  name: Base styles
  family: cfgov-cf-enhancements
  patterns:
    - name: a
      markup: |
        <a href="#">
            Some really really really really really really really really really
            really really really really really long text.
        </a>
        <a href="#">
            SomeReallyReallyReallyReallyReallyReallyReallyReallyReallyLongWord.
        </a>
      notes:
        - "Anchor links should break words in order to remain confined to their
           containers."
    - name: figure
      markup: |
        <figure>
            <img src="http://placekitten.com/300/300">
        </figure>
  tags:
    - cfgov-cf-enhancements
*/

a {
    word-break: break-all;
}

figure {
    margin-left: 0;
    margin-right: 0;
}


/* topdoc
  name: Simple base style modifiers
  family: cfgov-cf-enhancements
  patterns:
    - name: figure.figure__bordered
      markup: |
        <figure class="figure__bordered">
            <img src="http://placekitten.com/300/300">
        </figure>
  tags:
    - cfgov-cf-enhancements
*/

.figure__bordered img {
    border: 1px solid @gray-50;
}


/* topdoc
  name: Expandables
  family: cfgov-cf-enhancements
  patterns:
    - name: Header right float on medium modifier
      codenotes:
        - .expandable_header-right__float-on-medium
  tags:
    - cfgov-cf-enhancements
*/

.expandable_header-right__float-on-medium {
    float: none;

    .u-respond-to-min(600px, {
        float: right;
    });
}


/* topdoc
  name: cf-grid column dividers
  family: cfgov-cf-enhancements
  notes:
    - "cf-grid columns use left and right borders for fixed margins which means
       it's not possible to set visual left and right borders directly on them.
       Instead we can use the :before pseudo element and position it absolutely.
       The added benefit of doing it this way is that the border spans the
       entire height of the next parent using `position: relative;`. This means
       that the border will always match the height of the tallest column in the
       row."
  patterns:
    - name: Classes
      codenotes:
        - .grid_column__top-divider
        - .grid_column__left-divider
    - name: Usage
      codenotes:
        - |
          .my-column-1-2 {

              // Creates a column that spans 6 out of 12 columns.
              .grid_column(6, 12);

              // Add a top divider only at screen 599px and smaller.
              .u-respond-to-max(599px {
                  .grid_column__top-divider();
              });

              // Add a left divider only at screen 600px and larger.
              .u-respond-to-min(600px, {
                  .grid_column__left-divider();
              });

          }
  tags:
    - cfgov-cf-enhancements
*/

.grid_column__top-divider {
    &:before {
        content: "";
        display: block;
        height: 1px;
        margin-bottom: unit(@grid_gutter-width / @base-font-size-px, em);
        background-color: @gray-50;
    }
}

.grid_column__left-divider {
    padding-left: @grid_gutter-width;

    &:before {
        content: "";
        position: absolute;
        top: 0;
        bottom: 0;
        width: 1px;
        display: block;
        background-color: @gray-50;
        margin-left: -(@grid_gutter-width * 1.5);
    }
}


/* topdoc
    name: EOF
    eof: true
*/
